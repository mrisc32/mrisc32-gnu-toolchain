---
name: Build Toolchain

on:
  push:
    tags:
      - v*
  pull_request:
  workflow_dispatch:

jobs:
  build:
    name: ${{ matrix.config.name }}
    runs-on: ${{ matrix.config.os }}
    strategy:
      fail-fast: false
      matrix:
        config:
        - {
            name: "Ubuntu 20.04 AMD64",
            os: ubuntu-20.04,
            build_env: "docker",
            cc: "gcc",
            cxx: "g++",
            artifact: "mrisc32-gnu-toolchain-linux-amd64.tar.gz",
            archive_type: "tar",
          }
        - {
            name: "macOS Latest",
            os: macos-latest,
            build_env: "native",
            cc: "clang",
            cxx: "clang++",
            artifact: "mrisc32-gnu-toolchain-macos.zip",
            archive_type: "zip"
          }

    steps:
      - name: Checkout code
        uses: actions/checkout@v2
        with:
          submodules: recursive

      - name: Build toolchain (with Docker)
        if: ${{ matrix.config.build_env == 'docker' }}
        run: |
          ./build-in-docker.sh

      - name: Build toolchain (native)
        if: ${{ matrix.config.build_env == 'native' }}
        run: |
          mkdir -p out/install
          ./build.sh --prefix=${PWD}/out/install --clean

      - name: Prepare archive content
        run: |
          mv out/install mrisc32-gnu-toolchain
          cp ext/binutils-mrisc32/COPYING* mrisc32-gnu-toolchain/
          cp ext/newlib-mrisc32/COPYING* mrisc32-gnu-toolchain/
          cp ext/gcc-mrisc32/COPYING* mrisc32-gnu-toolchain/

      - name: Pack tar archive
        if: ${{ matrix.config.archive_type == 'tar' }}
        run: |
          tar -cvzf ${{ matrix.config.artifact }} mrisc32-gnu-toolchain

      - name: Pack zip archive
        if: ${{ matrix.config.archive_type == 'zip' }}
        run: |
          7z a -tzip -mx=9 ${{ matrix.config.artifact }} mrisc32-gnu-toolchain

      - name: Upload
        uses: actions/upload-artifact@v1
        with:
          path: ${{ matrix.config.artifact }}
          name: ${{ matrix.config.artifact }}

  release:
    if: contains(github.ref, 'tags/v')
    runs-on: ubuntu-20.04
    needs: build

    steps:
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref }}
          draft: false
          prerelease: false

      - name: Store Release url
        run: |
          echo "${{ steps.create_release.outputs.upload_url }}" > ./upload_url

      - uses: actions/upload-artifact@v1
        with:
          path: ./upload_url
          name: upload_url

  publish:
    if: contains(github.ref, 'tags/v')
    name: ${{ matrix.config.name }}
    runs-on: ubuntu-20.04
    needs: release
    strategy:
      fail-fast: false
      matrix:
        config:
        - {
            name: "Ubuntu 20.04 AMD64",
            artifact: "mrisc32-gnu-toolchain-linux-amd64.tar.gz",
            artifact_content_type: "application/x-tar",
          }
        - {
            name: "macOS Latest",
            artifact: "mrisc32-gnu-toolchain-macos.zip",
            artifact_content_type: "application/zip",
          }

    steps:
    - name: Download artifact
      uses: actions/download-artifact@v1
      with:
        name: ${{ matrix.config.artifact }}
        path: ./

    - name: Download URL
      uses: actions/download-artifact@v1
      with:
        name: upload_url
        path: ./
    - id: set_upload_url
      run: |
        upload_url=`cat ./upload_url`
        echo ::set-output name=upload_url::$upload_url
    - name: Upload to Release
      id: upload_to_release
      uses: actions/upload-release-asset@v1.0.1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.set_upload_url.outputs.upload_url }}
        asset_path: ${{ matrix.config.artifact }}
        asset_name: ${{ matrix.config.artifact }}
        asset_content_type: ${{ matrix.config.artifact_content_type }}
